@model RebornCheckerBoardMain.Models.DeactivateToken.SelectTokenToDeactivateModel

@{
    ViewBag.Title = "Deactivate";
}
<script type="text/javascript" src="~/Scripts/jquery-3.1.1.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.min.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    var my = this;
    my.token = {
        TokenCode: '',
        TokenType: '',
        TokenValue: '',
        TokenContent: '',
        Reason: '',
        EmailAddress: '',
        Comments: ''
    };

    my.tokenValidationState = {
        Comments: false,
        IsValid: function () {
            return my.tokenValidationState.Comments;
        }
    }

    $(document).ready(function () {
        $("#successalert").hide();

        // This is called whenever the token code dropdown changes.
        $("#TokenCodeSelected").change(function () {
            //change the model tokencode to be the value of the one selected
            my.token.TokenCode = $("#TokenCodeSelected").val();
            loadToken(my.token.TokenCode);
        });

        function loadToken(tokenCode) {
            //declare variables for token types here, to ensure on loading the page the token type will display correctly
            var Game = "Game";
            var Subscription = "Subscription";

            // If there are no tokens in the database, Model.SelectedTokenCode will still be empty.
            // We can't send an empty ID to the controller or it'll blow up. so if it's empty, we'll just return.
            if (tokenCode.length == 0) {
                return;
            }

            // We now have the token code to lookup. We'll pass it to the controller to get the
            // token data back using our POST.
                $.post("/IssueTokenModels/DisplayDeactiveTokenDetails/" + tokenCode, null, function (data) {
                    // We now have our token. It's got the same properties as the DeactivateTokenModel so we can
                    // just reference them directly with Javascript.
                    // set enum to display this text rather than the number value

                    if (data.TokenType == 0) {
                        data.TokenType = Game;
                        my.token.TokenType = Game;
                    }
                    else {
                        //my.token.TokenType = Subscription;
                        data.TokenType = Subscription;
                    }

                $("#token-type-display").text(data.TokenType);
                $("#token-Content-display").text(data.TokenContent);
                $("#token-Value-display").text(data.TokenValue);
                $("#token-EmailAddress-display").text(data.EmailAddress);

                my.token.TokenCode = data.TokenCode;
                my.token.TokenType = data.TokenType;
                my.token.TokenContent = data.TokenContent;
                my.token.TokenValue = data.TokenValue;
                my.token.EmailAddress = data.EmailAddress;
            });
        }

        // This is what will be called whenever we add or remove a character in the reason textbox.
        // We will do our validations on the input here.
        $("#token-reason-editor").change(function () {
            // Get the text the user entered.
            my.token.Reason = $("#token-reason-editor").val();
        });

        // Same kinda game down here, just with the comments.
        $("#token-comments-editor").bind('input propertychange', function () {
            my.token.Comments = $("#token-comments-editor").val();
            if (my.token.Comments.length == 0) {
                my.tokenValidationState.Comments = false;
                $("#token-comments-validation-message").show();
            } else {
                my.tokenValidationState.Comments = true;
                $("#token-comments-validation-message").hide();
            }
        });

        // When the user is ready to deactivate they will click the button to do so.
        // This is the code that is called when that happens.
        $("#deactivate-button").click(function () {
            // Let's make sure the input is valid first. If it's not valid, just return -
            // we should be displaying an error message saying what the user needs to do.
            if (!my.tokenValidationState.IsValid()) {
                return;
            }

            // We have valid data. Now we will call back to the controller to do the deactivation.
            $.post("/IssueTokenModels/DeactivateToken/" + my.token.TokenCode, my.token, function () {
                $("#successalert").show();

                $("#successalert").on("close.bs.alert", function () {
                document.location = "@Url.Action("Index","Home")"
                 });
                // The token is now deactivated. Whatever we need to do the let the user know, do that.
                //alert('wee we deactivated the token!'); // ... don't show that message. Show something else nicer instead.
            });
        });

        $("#Cancel-button").click(function () {
            document.location = "@Url.Action("Index","Home")"
        });
        // When the page first loads, the change() is not triggered on our drop down (because we
        // haven't changed it yet). Furthermore, if we only have one token issued (or one token active)
        // then we can't trigger the change() event on the dropdown because we can't change it.
        //
        // So, to make sure that the information of the first token we return is shown on the page,
        // we'll just call the loadToken() function at the start of our page running.
        loadToken('@Model.SelectedTokenCode');
    });

</script>

<div class="form-horizontal">
    <h2>Deactivate Token</h2>
    <hr />

    <div class="form-group">
        <label for="TokensToChooseFrom" class="control-label col-md-2"> Select A Token</label>        
        <div class="col-md-10">
            @*Display list of token codes previously issued*@
            @Html.DropDownListFor(model => Model.SelectedTokenCode, Model.TokensToChooseFrom, new { @id = "TokenCodeSelected", @class = "form-control" })
        </div>
    </div>

    @* Display Token Type *@
 
    <div class="form-group">
        <label for="TokenType" class="control-label col-md-2"> Token Type </label>
        <div class="col-md-10">
            <span id="token-type-display" class="control-label"></span>
        </div>
    </div>
    <div class="form-group">
        <label for="TokenContent" class="control-label col-md-2"> Token Content</label>
        <div class="col-md-10">
            <span id="token-Content-display"  class="control-label"></span>
        </div>
    </div>
    <div class="form-group">
        <label for="TokenValue" class="control-label col-md-2"> Token Value</label>
        <div class="col-md-10">
            <span id="token-Value-display"  class="control-label"></span>
        </div>
    </div>
    <div class="form-group">
        <label for="EmailAddress" class="control-label col-md-2">Deactivate From</label>
        <div class="col-md-10">
            <span id="token-EmailAddress-display"  class="control-label"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="Reason" class="control-label col-md-2"> Reason For Deactivation </label>
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.SelectedReason, Model.ReasonChoices, new { @id = "token-reason-editor", @class = "form-control" })
            <p id="token-reason-validation-message" class="text-danger" hidden="hidden">A reason is required.</p>
        </div>
    </div>

    <div class="form-group">
        <label for="Comments" class="control-label col-md-2"> Comments </label>       
        <div class="col-md-10">
            <textarea id="token-comments-editor" class="form-control"></textarea>
            @*<textarea id="token-comments-editor" class="form-control"></textarea>*@
            <p id="token-comments-validation-message" class="text-danger" hidden="hidden">Comments are required.</p>
        </div>
    </div>
    @*Button to submit the deactivate *@
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input id="deactivate-button" type="button" value="Deactivate" class="btn btn-default" />
            @*On cancel return the agent back to the home page *@
            <input id="Cancel-button" type="button" value="Cancel" class="btn btn-default" />
        </div>
    </div>   
</div>
@*Success Alert, when closed redirect the page to...*@
<div class="alert alert-success alert-dismissable" id="successalert">
    <a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
    <strong>The Token selected has been successfully deactivated</strong>
</div>

   