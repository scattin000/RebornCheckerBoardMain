@*@model IEnumerable<RebornCheckerBoardMain.Models.IssueToken.IssueTokenModel > *@
@using System.Linq;

@model RebornCheckerBoardMain.Models.IssueToken.IssueTokenModel

@{
    ViewBag.Title = "Index";
}

<h2>Issue Token </h2>
<script type="text/javascript" src="~/Scripts/jquery-3.1.1.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.min.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    // Once my page has fully rendered and loaded, execute function() { ... }
    // Allows the page to refresh & change the Token Content attributes depending on which Token Type was Selected 
    $(document).ready(function () {
   //hook up JS function on element TokenType 
        $("#TokenType").change(function () {
            var tokenType = this.value;
            if (tokenType == 0) {
                $("#GameTokenContentTypes").show();
                $("#SubscriptionTokenContentTypes").hide();
            } else if (tokenType == 1) {
                $("#GameTokenContentTypes").hide();
                $("#SubscriptionTokenContentTypes").show();
            }
        });
    });
</script>

<p>
    @Html.ActionLink("Create New", "Create")
@*Token Type Selection here :): Display the page as "Issue Token" & the
    @if (ViewData.ModelState.IsValid)
    {
              @ViewBag.SelectedType
              @ViewBag.SelectedContent
              @ViewBag.SelectedValue
            @ViewBag.SelectedReason
            @ViewBag.EnteredEmail
            @ViewBag.EnteredComment
    }*@
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @Html.AntiForgeryToken()
        <div class="form-group">
            <h4>Token Type</h4>
            @*On selecting a type call the tokenValView*@
            <div class="col-md-10" id="SelectType" onblur="tokenValView(this.value)" >
                @Html.EnumDropDownListFor(model => model.TokenType, new { @id = "TokenType" }) <br />
                @*How to default to null?  How to take this from here & put into DB... What to do to the controller?*@
            </div>

       </div>
        <div class="form-group">
            <h4>Token Content</h4>
            @*save TokenContent in DB, with the selected value from GAMETOKENCONTENT*@
            @Html.DropDownListFor(model => model.TokenContent, Model.GameTokenContent, new { @id = "GameTokenContentTypes" })
            @Html.DropDownListFor(model => model.TokenContent, Model.SubscriptionTokenContent, new { @id = "SubscriptionTokenContentTypes" })
        </div>

        <div class="form-group">
            <label for="SubscriptionVal, GameVal ">Token Value </label>
            <input type="number" class="form-control" id="SubscriptionVal" style="display: none;" />
            @*Load value associated with the Token Chosen  *@
            <div class="form-group">
                <select class="form-control" id="GameVal" >
                    <option>1st Content </option>
                </select>
            </div>

            @*Reason Drop down*@

            @*Comments*@
            <div class="form-group">
                <label for="comment">Comments</label>
                <textarea class="form-control" rows="5" id="comment"></textarea>
                @*Add required text & Clear the required field when entered*@
            </div>
        </div>
        @*select to go to Verification page (details)*@
        <div class="form-group">
            <div class="col-md-offset-2 col-md-offset-10">
                <input type="submit" value="Next >" class="btn btn-default" />
            </div>
        </div>
}
</p>

    @*
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TokenType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TokenContent)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Reason)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EmailAddress)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Comments)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TokenType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TokenContent)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Reason)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EmailAddress)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Comments)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id=item.TokenCode }) |
                    @Html.ActionLink("Details", "Details", new { id=item.TokenCode }) |
                    @Html.ActionLink("Delete", "Delete", new { id=item.TokenCode })
                </td>
            </tr>
        }

*@

</table>
